# üíÅ The Google Cloud CPE workflow will:
# - Parse inputs: service for deployment, namespace, helm-repo, command
# - Check for required secrets
# - Checkout your repository
# - Install gcloud cli and helm chart tools
# - Add helm repository
# - Perform GKE cluster login
# - Perform helm install/install/validate for service

# ‚ÑπÔ∏è Configure your repository and the workflow with the following steps:
# 1. Have access to an GKE cluster. Refer to https://cloud.google.com/kubernetes-engine/docs/quickstart
# 2. Set up secrets in your workspace: GKE_PROJECT with the name of the project, GKE_SA_KEY with the Base64 encoded JSON service account key and IMAGE_REGISTRY_TOKEN (optional HELM_REGISTRY_TOKEN) repository secrets. Refer to:
#   - https://github.com/GoogleCloudPlatform/github-actions/tree/docs/service-account-key/setup-gcloud#inputs
#   - https://docs.github.com/en/actions/reference/encrypted-secrets
#   - https://cli.github.com/manual/gh_secret_set
# 3. (Optional) Edit the top-level 'env' section as marked with 'üñäÔ∏è' if the defaults are not suitable for your project.
# 5. Commit and push the workflow file to your default branch. Manually trigger a workflow run.

# üìÉ Considerations
# Image registry should be added to cluster in coresponding namespace before workflow run
# Example:    
#     kubectl create secret docker-registry pullsecret \
#       --docker-server=$IMAGE_REGISTRY \
#       --docker-username=user --docker-password=token



name: Deploy service

env:
  # üñäÔ∏è EDIT your repository secrets to log into your OpenShift cluster and set up the context.
  # See https://github.com/redhat-actions/oc-login#readme for how to retrieve these values.
  # To get a permanent token, refer to https://github.com/redhat-actions/oc-login/wiki/Using-a-Service-Account-for-GitHub-Actions
  PROJECT_ID:   ${{ secrets.GKE_PROJECT }}        
  GKE_CLUSTER:  gke1                                # TODO: update to cluster name
  GKE_ZONE:     us-west1-a                          # TODO: update to cluster zone
  DOMAIN:       test.dev                            # TODO: update to domain name

  # üñäÔ∏è EDIT to change the helm registry settings.
  # Registries such as Jfrog, GHCR, Quay.io, and Docker Hub are supported.
  HELM_REGISTRY:            ${{ secrets.HELM_REGISTRY }}
  HELM_REGISTRY_USER:       ${{ secrets.HELM_REGISTRY_USER }}          
  HELM_REGISTRY_TOKEN:      ${{ secrets.HELM_REGISTRY_TOKEN }}
  IMAGE_REGISTRY:           ${{ secrets.IMAGE_REGISTRY }}


on:
  # https://docs.github.com/en/actions/reference/events-that-trigger-workflows
  workflow_dispatch:
    inputs:
      service:
        type: choice
        description: service(s) for deployment
        required: true
        default: webrtc
        options:
        - infra
        - gauth
        - voice
        - tenant
        - gws
        - wwe        
        - webrtc
        - webrtc-blue-green
        - gvp
        - gsp
        - gim
        - gca
        - designer
        - designer-blue-green
        - ucsx
        - tlm
        - nexus
        - iwd
        - iwdem
        - iwddm
        - cxc
        - ges
        - pulse
        - bds
        - ixn
        - gcxi
      namespace:
        description: namespace (if not default)
        required: false
        default: "webrtc-test"
      helmrepo:
        description: helm repo name in HELM_REGISTRY
        required: true
        default: helm-stage
      command:
        description: command install|validate|uninstall
        required: true
        default: validate
        
jobs:
  gke-ci-cd:
    name: Build and deploy to Google Kubernetes Engine (GKE)

     # üñäÔ∏è (Optional) EDIT if you want to run on your own runner
    runs-on: ubuntu-latest

    steps:
    - name: Check for required secrets
      uses: actions/github-script@v4
      with:
        script: |
          const secrets = {
            GKE_SA_KEY: `${{ secrets.GKE_SA_KEY }}`,
            GKE_PROJECT: `${{ secrets.GKE_PROJECT }}`,
            HELM_REGISTRY_TOKEN: `${{ secrets.HELM_REGISTRY_TOKEN }}`,
          };

          const missingSecrets = Object.entries(secrets).filter(([ name, value ]) => {
            if (value.length === 0) {
              core.error(`Secret "${name}" is not set`);
              return true;
            }
            core.info(`‚úîÔ∏è Secret "${name}" is set`);
            return false;
          });

          if (missingSecrets.length > 0) {
            core.setFailed(`‚ùå At least one required secret is not set in the repository. \n` +
              "You can add it using:\n" +
              "GitHub UI: https://docs.github.com/en/actions/reference/encrypted-secrets#creating-encrypted-secrets-for-a-repository \n" +
              "GitHub CLI: https://cli.github.com/manual/gh_secret_set \n" +
              "Also, refer to https://github.com/redhat-actions/oc-login#getting-started-with-the-action-or-see-example");
          }
          else {
            core.info(`‚úÖ All the required secrets are set`);
          }


    - name: Check out repository
      uses: actions/checkout@v2


    - name: Setup gcloud CLI
      uses: google-github-actions/setup-gcloud@v0.2.0
      with:
        service_account_key: ${{ secrets.GKE_SA_KEY }}
        project_id: ${{ secrets.GKE_PROJECT }}


    - name: Install helm tool
      uses: azure/setup-helm@v1
      with:
        # üñäÔ∏è (Optional) EDIT if you want to specify helm version (default: "latest")
        version: "v3.7.1"


    - name: Helm repo add
      run: |
        helm repo add --force-update helm_repo ${{ env.HELM_REGISTRY }}${{ github.event.inputs.helmrepo }} \
          --username ${{ env.HELM_REGISTRY_USER }} --password ${{ env.HELM_REGISTRY_TOKEN }}



    # Get the GKE credentials so we can deploy to the cluster
    # This action configures authentication to a GKE cluster via a kubeconfig file that can be used 
    # with kubectl or other methods of interacting with the cluster.
    - uses: google-github-actions/get-gke-credentials@v0.2.1
      with:
        cluster_name: ${{ env.GKE_CLUSTER }}
        location: ${{ env.GKE_ZONE }}
        credentials: ${{ secrets.GKE_SA_KEY }}

    - name: Create or use namespace
      run: |
        NS=${{ github.event.inputs.namespace }}
        if ! kubectl get namespaces $NS; then
           echo "Namespace $NS does not exist. Creating it.."
           kubectl create namespace $NS
        else
           echo "Namespace $NS already exists. Will use it."
        fi
        kubectl config set-context --current --namespace=${{ github.event.inputs.namespace }}


    - name: Custom script
      run: |
        export NS=${{ github.event.inputs.namespace }}
        export SERVICE=${{ github.event.inputs.service }}
        export DOMAIN=${{ env.DOMAIN }}
        export IMAGE_REGISTRY=${{ env.IMAGE_REGISTRY }}

        cd $SERVICE

        FULLCOMMAND="${{ github.event.inputs.command }}"
        COMMAND=$(echo $FULLCOMMAND | cut -d' ' -f1)
        if [[ "$FULLCOMMAND" == *" "* ]]; then
          CHART_NAME=$(echo $FULLCOMMAND | tr -s ' ' | cut -d' ' -f2)
          RL_NAME=$(echo $FULLCOMMAND | tr -s ' ' | cut -d' ' -f3)
        fi

        # FOR EVERY HELM CHART ############################################################
        # ‚ÑπÔ∏è Notice: in application folder should be exist subfolder with name in format: 
        #      [0-9][0-9]_chart_chart-name 
        # where chart-name is name of chart using to installing 
        # and digits define the instalation order 
        # The chart-name using in command:
        #     helm install RELEASE-NAME helm-repo/chart-name
        # ##################################################################################
        for DIR in [0-9][0-9]_chart_*$CHART_NAME*/; do
          
          CHART=$([[ -d "$DIR" ]] && echo $DIR | sed 's/[0-9][0-9]_chart_//' | sed 's/\///')
          
          DIR=$(echo $DIR | sed 's/\///')
          
          # evaluate ENV variables
          envsubst < $DIR/override_values.yaml > overrides.yaml

          # üñäÔ∏è (Optional) EDIT 1st line of chart.ver file with chart version number
          VER=$(head -n 1 $DIR/chart.ver)
          
          FLAGS="helm_repo/$CHART --install --version=$VER -n $NS -f $(pwd)/overrides.yaml"
          
          case $COMMAND in

            install)
              echo "Installing..."
              CMD="upgrade"
              ;;

            uninstall)
              echo "Uninstalling..."
              CMD="uninstall"
              FLAGS=""
              ;;

            validate)
              echo "Validating..."
              CMD="upgrade"
              FLAGS+=" --dry-run"
              ;;

            *)
              echo "‚ùå Wrong command"
              exit 1
              ;;

          esac

          cd $DIR
          
          touch overrides.yaml
          [[ "$FLAGS" ]] && FLAGS+=" -f $(pwd)/overrides.yaml"
            
          # FOR EVERY HELM RELEASE###########################################################
          # ‚ÑπÔ∏è Notice: in chart folder should be exist subfolder with name in format: 
          #      [0-9][0-9]_release_release-name 
          # where release-name is name of release using to installing 
          # and digits define the instalation order 
          # The release-name using in command:
          #     helm install release-name helm-repo/chart-name
          #
          # If you want to run some preparing script (for ex: init database, check conditions) 
          # before installing, place you code in pre-relese-script.sh in release subfolder
          #
          # If you want to run some post-installing script (for ex: validate something),
          # place you code in post-relese-script.sh in release subfolder
          # ##################################################################################
          for DIR_RL in [0-9][0-9]_release_*$RL_NAME*/; do

                RELEASE=$([[ -d "$DIR_RL" ]] && echo $DIR_RL | sed 's/[0-9][0-9]_release_//' | sed 's/\///')

                cd $DIR_RL
                # Run pre-release-script if exists
                [[ "$COMMAND" == "install" ]] && [[ -f "pre-release-script.sh" ]] \
                  && source pre-release-script.sh
                cd ..

                # evaluate ENV variables
                envsubst < $DIR_RL/override_values.yaml > overrides.yaml


                echo "helm $CMD $RELEASE $FLAGS"
                [[ "$CMD" ]] && [[ "$CHART" ]] && [[ "$RELEASE" ]] && \
                            helm $CMD $RELEASE $FLAGS

                cd $DIR_RL
                # Run post-release-script if exists
                [[ "$COMMAND" == "install" ]] && [[ -f "post-release-script.sh" ]] \
                  && source post-release-script.sh
                cd ..
          
          done

          cd ..

        done
