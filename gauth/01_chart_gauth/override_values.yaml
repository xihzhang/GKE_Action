# Docker image configuration
image:
  registry: $IMAGE_REGISTRY/auth
  # Configure imagePullSecrets if docker registry requires authentication
  # https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/#registry-secret-existing-credentials
  imagePullSecrets:
    - name: pullsecret
  pullPolicy: IfNotPresent
COLOR: blue
postgres:
  deploy: false
  secret:
    name_override:
    create: true
  configmap:
    name_override:
    create: true
  image: postgres:11-alpine
  # REQUIRED FIELDS:
  username: gauth_pg_username
  password: gauth_pg_password
  db: gauth
  host: POSTGRES_ADDR
  port: 5432
redis:
  deploy: false
  secret:
    name_override: gauth-redis
    create: true
  configmap:
    name_override:
    create: true
  image: redis:5-stretch
  cluster_nodes: infra-redis-redis-cluster-headless.infra.svc.cluster.local:6379
  use_tls: false
  # REDIS AUTH
  password_required: true
  password: gauth_redis_password
services:
  secrets:
    useSecretProviderClass: false
    aadpodidbinding: gauth-identity
    secretProviderClassNames:
      jks_keyvault: keyvault-gauth-jks-keyvault
      jks_credentials: keyvault-gauth-jks-credentials
      admin_user: keyvault-gauth-admin-user
      pg_user: keyvault-gauth-pg-user
      redis_password: keyvault-gauth-redis-password
      client_credentials: keyvault-gauth-client-credentials
      consul_token: keyvault-consul-consul-gauth-token
  # Number of pod replicas, recommended to be N+1
  replicas: 2
  location: /USW1
  db:
    init: true
    poolSize: 3
    poolCheckoutTimeout: 3000
    ssl: disable
  secret:
    name_override:
    create: true
    # REQUIRED FIELDS:
    admin_username: gauth_admin_username
    admin_password: gauth_admin_password
    client_id: gauth_gws_client_id
    client_secret: gauth_gws_client_secret
  auth_ui:
    # Pod resources requests and limits
    resources:
      limits:
        cpu: 100m
        memory: 1Gi
      requests:
        cpu: 100m
        memory: 512Mi
  auth:
    jks:
      enabled: true
      sso:
        enabled: true
      secret:
        create: true

      # Convert keystore.jks file content to base64 ( cat keystore.jks | base64 ) and put the output here
      keyStore: jksStorage.jks

      #keyStoreFileData:  <key content>
      keyStoreFileData: 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
      
      # Keystore password
      keyStorePassword: gauth_jks_keyStorePassword
      # SSL key alias
      keyAlias: gws-auth-key
      # SSL key password
      keyPassword: gauth_jks_keyPassword
    # Number of pod replicas, recommended to be N+1, defaults to services.replica if empty
    replicas:
    # Pod resources requests and limits
    resources:
      requests:
        cpu: 200m
        memory: 1Gi
      limits:
        cpu: 200m
        memory: 2Gi
    # readiness probe.
    # To disable readinessProbe - set readinessProbe: {}
    readinessProbe:
      httpGet:
        path: /health
        port: management
      initialDelaySeconds: 30
      timeoutSeconds: 3
      periodSeconds: 10
    # liveness probe
    # To disable livenessProbe - set livenessProbe: {}
    livenessProbe:
      httpGet:
        path: /health
        port: management
      initialDelaySeconds: 120
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 3
      failureThreshold: 3
  environment:
    # Number of pod replicas, recommended to be N+1, defaults to services.replica if empty
    replicas:
    force_writable: true
    # Pod resources requests and limits
    resources:
      requests:
        cpu: 200m
        memory: 1Gi
      limits:
        cpu: 200m
        memory: 1Gi
    # readiness probe.
    # To disable readinessProbe - set readinessProbe: {}
    readinessProbe:
      httpGet:
        path: /health
        port: management
      initialDelaySeconds: 30
      timeoutSeconds: 3
      periodSeconds: 10
    # liveness probe
    # To disable livenessProbe - set livenessProbe: {}
    livenessProbe:
      httpGet:
        path: /health
        port: management
      initialDelaySeconds: 120
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 3
      failureThreshold: 3
# Optional Deployment/ReplicaSet parameters
optional:
  # https://kubernetes.io/docs/concepts/configuration/pod-priority-preemption/#priorityclass
  priorityClassName: ''
  #  https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
  securityContext: {}
  #  https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
  nodeSelector: {}
  #  https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
  tolerations: []
  affinity:
    podAntiAffinity:
      preferredDuringSchedulingIgnoredDuringExecution:
        - podAffinityTerm:
            labelSelector:
              matchLabels:
                gauth: '{{ .gauth }}'
                app.kubernetes.io/name: '{{ include "auth.name" . }}'
                app.kubernetes.io/instance: '{{ .Release.Name }}'
            topologyKey: failure-domain.beta.kubernetes.io/zone
          weight: 100
# https://kubernetes.io/docs/concepts/workloads/controllers/deployment/#strategy
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 10
      maxUnavailable: 0
# Ingress config
# tps://kubernetes.io/docs/concepts/services-networking/ingress/
ingress:
  enabled: true
  # Host that will be used by ingress.
  # Applies to all inbound traffic through the host specified
  frontend: gauth.${DOMAIN}
  annotations:
    # Default annotations:
    nginx.ingress.kubernetes.io/proxy-body-size: "0"
  # HTTPS configuration
  tls_enabled: true
  tls:
    - hosts:
        - gauth.${DOMAIN}
      secretName: letsencrypt
# Internal  config
# tps://kubernetes.io/docs/concepts/services-networking/ingress/
internal_ingress:
  enabled: true
  # Host that will be used by ingress.
  # Applies to all inbound traffic through the host specified
  frontend: gauth-int.${DOMAIN}
  annotations:
    # Default annotations:
    nginx.ingress.kubernetes.io/proxy-body-size: "0"
  # HTTPS configuration
  tls_enabled: true
  tls:
    - hosts:
        - gauth-int.${DOMAIN}
      #secretName: letsencrypt
#monitoring:
  # Deploy ServiceMonitor
  #enabled: true
  # Metrics Scraping Interval
  #interval: 15s
  # Create ConfigMap with Grafana Dashboards
  #dashboards: true
  # Create PrometheusRule k8s object with alarm definitions
  #alarms: false
  # Create rules with CRITICAL severity for Pager Duty integration.
  # `false` will change severity to HIGH (email notifications)
  #pagerduty: true
services:
  auth:
    replicas: 1
  environment:
    replicas: 1
  auth_ui:
    replicas: 1
pod_autoscaler:
  auth:
    enabled: false
    metrics:
      - type: Resource
        resource:
          name: cpu
          target:
            type: Utilization
            averageUtilization: 350
  environment:
    enabled: false
    metrics:
      - type: Resource
        resource:
          name: cpu
          target:
            type: Utilization
            averageUtilization: 350
