# Docker image configuration
image:
  registry: $IMAGE_REGISTRY/auth
  # Configure imagePullSecrets if docker registry requires authentication
  # https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/#registry-secret-existing-credentials
  imagePullSecrets:
    - name: pullsecret
  pullPolicy: IfNotPresent
COLOR: blue
postgres:
  deploy: false
  secret:
    name_override:
    create: true
  configmap:
    name_override:
    create: true
  image: postgres:11-alpine
  # REQUIRED FIELDS:
  username: gauth_pg_username
  password: gauth_pg_password
  db: gauth
  host: POSTGRES_ADDR
  port: 5432
redis:
  deploy: false
  secret:
    name_override: gauth-redis
    create: true
  configmap:
    name_override:
    create: true
  image: redis:5-stretch
  cluster_nodes: infra-redis-redis-cluster-headless.infra.svc.cluster.local:6379
  use_tls: false
  # REDIS AUTH
  password_required: true
  password: gauth_redis_password
services:
  secrets:
    useSecretProviderClass: false
    aadpodidbinding: gauth-identity
    secretProviderClassNames:
      jks_keyvault: keyvault-gauth-jks-keyvault
      jks_credentials: keyvault-gauth-jks-credentials
      admin_user: keyvault-gauth-admin-user
      pg_user: keyvault-gauth-pg-user
      redis_password: keyvault-gauth-redis-password
      client_credentials: keyvault-gauth-client-credentials
      consul_token: keyvault-consul-consul-gauth-token
  # Number of pod replicas, recommended to be N+1
  replicas: 2
  location: /USW1
  db:
    init: true
    poolSize: 3
    poolCheckoutTimeout: 3000
    ssl: disable
  secret:
    name_override:
    create: true
    # REQUIRED FIELDS:
    admin_username: gauth_admin_username
    admin_password: gauth_admin_password
    client_id: gauth_gws_client_id
    client_secret: gauth_gws_client_secret
  auth_ui:
    # Pod resources requests and limits
    resources:
      limits:
        cpu: 100m
        memory: 1Gi
      requests:
        cpu: 100m
        memory: 512Mi
  auth:
    jks:
      enabled: true
      sso:
        enabled: true
      secret:
        create: true

      # Convert keystore.jks file content to base64 ( cat keystore.jks | base64 ) and put the output here
      keyStore: jksStorage.jks

      #keyStoreFileData:  <key content>
      keyStoreFileData: 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
      # Keystore password
      keyStorePassword: gauth_jks_keyStorePassword
      # SSL key alias
      keyAlias: gws-auth-key
      # SSL key password
      keyPassword: gauth_jks_keyPassword
    # Number of pod replicas, recommended to be N+1, defaults to services.replica if empty
    replicas:
    # Pod resources requests and limits
    resources:
      requests:
        cpu: 200m
        memory: 1Gi
      limits:
        cpu: 200m
        memory: 2Gi
    # readiness probe.
    # To disable readinessProbe - set readinessProbe: {}
    readinessProbe:
      httpGet:
        path: /health
        port: management
      initialDelaySeconds: 30
      timeoutSeconds: 3
      periodSeconds: 10
    # liveness probe
    # To disable livenessProbe - set livenessProbe: {}
    livenessProbe:
      httpGet:
        path: /health
        port: management
      initialDelaySeconds: 120
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 3
      failureThreshold: 3
  environment:
    # Number of pod replicas, recommended to be N+1, defaults to services.replica if empty
    replicas:
    force_writable: true
    # Pod resources requests and limits
    resources:
      requests:
        cpu: 200m
        memory: 1Gi
      limits:
        cpu: 200m
        memory: 1Gi
    # readiness probe.
    # To disable readinessProbe - set readinessProbe: {}
    readinessProbe:
      httpGet:
        path: /health
        port: management
      initialDelaySeconds: 30
      timeoutSeconds: 3
      periodSeconds: 10
    # liveness probe
    # To disable livenessProbe - set livenessProbe: {}
    livenessProbe:
      httpGet:
        path: /health
        port: management
      initialDelaySeconds: 120
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 3
      failureThreshold: 3
# Optional Deployment/ReplicaSet parameters
optional:
  # https://kubernetes.io/docs/concepts/configuration/pod-priority-preemption/#priorityclass
  priorityClassName: ''
  #  https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
  securityContext: {}
  #  https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
  nodeSelector: {}
  #  https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
  tolerations: []
  affinity:
    podAntiAffinity:
      preferredDuringSchedulingIgnoredDuringExecution:
        - podAffinityTerm:
            labelSelector:
              matchLabels:
                gauth: '{{ .gauth }}'
                app.kubernetes.io/name: '{{ include "auth.name" . }}'
                app.kubernetes.io/instance: '{{ .Release.Name }}'
            topologyKey: failure-domain.beta.kubernetes.io/zone
          weight: 100
# https://kubernetes.io/docs/concepts/workloads/controllers/deployment/#strategy
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 10
      maxUnavailable: 0
# Ingress config
# tps://kubernetes.io/docs/concepts/services-networking/ingress/
ingress:
  enabled: true
  # Host that will be used by ingress.
  # Applies to all inbound traffic through the host specified
  frontend: gauth.${DOMAIN}
  annotations:
    # Default annotations:
    nginx.ingress.kubernetes.io/proxy-body-size: "0"
  # HTTPS configuration
  tls_enabled: true
  tls:
    - hosts:
        - gauth.${DOMAIN}
      secretName: letsencrypt
# Internal  config
# tps://kubernetes.io/docs/concepts/services-networking/ingress/
internal_ingress:
  enabled: true
  # Host that will be used by ingress.
  # Applies to all inbound traffic through the host specified
  frontend: gauth-int.${DOMAIN}
  annotations:
    # Default annotations:
    nginx.ingress.kubernetes.io/proxy-body-size: "0"
  # HTTPS configuration
  tls_enabled: true
  tls:
    - hosts:
        - gauth-int.${DOMAIN}
      #secretName: letsencrypt
#monitoring:
  # Deploy ServiceMonitor
  #enabled: true
  # Metrics Scraping Interval
  #interval: 15s
  # Create ConfigMap with Grafana Dashboards
  #dashboards: true
  # Create PrometheusRule k8s object with alarm definitions
  #alarms: false
  # Create rules with CRITICAL severity for Pager Duty integration.
  # `false` will change severity to HIGH (email notifications)
  #pagerduty: true
services:
  auth:
    replicas: 1
  environment:
    replicas: 1
  auth_ui:
    replicas: 1
pod_autoscaler:
  auth:
    enabled: false
    metrics:
      - type: Resource
        resource:
          name: cpu
          target:
            type: Utilization
            averageUtilization: 350
  environment:
    enabled: false
    metrics:
      - type: Resource
        resource:
          name: cpu
          target:
            type: Utilization
            averageUtilization: 350
