###############################################################################
# Global Webrtc parameters
# https://all.docs.genesys.com/WebRTC/Current/WebRTCPEGuide/Configure
###############################################################################
deployment:
  coturnService:
    annotations: {}
  type:              infra/coturn/gateway/cutover
  color:             "blue"
  namespace:         ${NS}
  keda:              false
  securityContext:
    runAsUser: 500
    runAsGroup: 500
  coturnDeployment:  internal
  ingress:
    domain: ${DOMAIN}
    annotations:
      cert-manager.io/cluster-issuer:            selfsigned-cluster-issuer
      kubernetes.io/ingress.class:               nginx
      nginx.ingress.kubernetes.io/affinity:      cookie
      nginx.ingress.kubernetes.io/affinity-mode: persistent
      nginx.ingress.kubernetes.io/ssl-redirect:  "true"
      nginx.ingress.kubernetes.io/session-cookie-path:     "/; Secure"
      nginx.ingress.kubernetes.io/session-cookie-samesite: None
  dnsPolicy: ClusterFirst
  dnsConfig:
    options:
      - name: ndots
        value: "3"
  keda: false

monitoring:
  enabled:           true
  dashboards:        true
  prometheusMetrics: true
  prometheusAlerts:  true


networkPolicies:
  enabled: false


image:
  pullPolicy: Always
  imagePullSecrets:
    - pullsecret
  webrtc: $IMAGE_REGISTRY/webrtc
  coturn: $IMAGE_REGISTRY/webrtc
  webrtcVersion: 100.0.016.0000
  coturnVersion: 100.0.016.0000


gateway:
  annotations: {}
  # NB! 1 worker handles 25 regs/calls. CPU and Mem request depends on num of workers
  logPath:                 "stdout"
  crash_path:               ""
  # Section for Persistent Volume Claim used for Coturn logs.
  # If not defined - then HostPath will be used for logs mount
  #logPvc:
  #  # Name of PersistentVolumeClaim - if exists, PVC will be created. Otherwise, hostpath will be used for Coturn logs
  #  pvcName:                webrtc-coturn-log-pvc
  #  # StorageClass name for Coturn PVC
  #  storageClassName:       nfs-client
  #  capacity:               2Gi
  # Voice microservice - SIP proxy address
  voiceSipProxy:           voice-sipproxy.voice.svc.cluster.local;transport=tcp
  esServer:                stdout
  replicas:                1
  workersCount:            2
  turnExternalUriBlue:     ""
  turnExternalUriGreen:    ""
  enable1pccCalls:         true

  authRedirectUri:          https://gauth.${DOMAIN}
  # GWS9.0 Auth service address
  authService:              http://gauth-auth.gauth:80
  # GWS9.0 Environment service address
  envService:               http://gauth-environment.gauth:80
  # GWS9.0 Configuration service address
  cfgService:               http://gws-service-proxy.gws.svc.cluster.local:80

  # Enable or disable transoding on gateway side - true/false. Transcoding is enabled by default
  # If transcoding is disabled - then Gateway can handle more agent sessions but OPUS codec is not supported
  enableTranscoding:        true
  # other arguments
  arguments:                [ '-logpath stdout', '-es-server stdout' ]
  # Add annotations from the following map to Gateway pods
  podAnnotations:
    prometheus.io/scrape: "true"
    prometheus.io/port:   "10052"
    prometheus.io/path:   "/metrics"
  resources:
    requests:
      # NB! 800m per worker, will be multiplied by workers_count in helm
      cpu:  500
      # NB! 150Mi per worker, will be multiplied by workers_count in helm
      memory: 150
    limits:
      # CPU depends on workers count, if workers_count = 3, then cpu must be 4
      cpu: 1
      memory: 1Gi
  scaling:
    prometheusAddress: http://monitoring-prometheus-prometheus.monitoring:9090
    pollingInterval:   30
    maxReplicaCount:   100
    thresholdSignins:  71
    thresholdCpu:      60
    thresholdMemory:   60
  serviceAccountName: default
  securityContext:
    runAsUser: 500
    runAsGroup: 500
  secrets:
    type: env
    csi:
      gws: keyvault-webrtc-gws-client
    k8s:
      gws: webrtc-gws-secret
    env:
     gwsClient: webrtc-clientid
     gwsSecret: secret

coturn:
  ServiceAccount: default
  logPath:     "stdout"
  # If not defined - then HostPath will be used for logs mount
  #logPvc:
  #  # Name of PersistentVolumeClaim - if exists, PVC will be created. Otherwise, hostpath will be used for Coturn logs
  #  pvcName:                webrtc-coturn-log-pvc
  #  # StorageClass name for Coturn PVC
  #  storageClassName:       nfs-client
  #  capacity:               2Gi
  replicas:    1
  port:        80
  # Coturn resources will be inserted as-is from this section
  resources:
    requests:
      cpu: 300m
      memory: 256Mi
    limits:
      cpu: 700m
      memory: 1Gi
  scaling:
    pollingInterval:   30
    maxReplicaCount:   100
    thresholdCpu:      60
    thresholdMemory:   60
  serviceAccountName: default
  securityContext:
    runAsUser: 500
    runAsGroup: 500